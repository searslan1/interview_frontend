import {api }from "@/utils/api";
import { CreateInterviewDTO, Interview } from "@/types/interview";
import { UpdateInterviewDTO } from "@/types/updateInterviewDTO"; // Backend'deki DTO'lar ile uyum iÃ§in eklendi

export const interviewService = {
  /**
   * Yeni mÃ¼lakat oluÅŸturma
   */
  async createInterview(data: CreateInterviewDTO): Promise<Interview> {
    // âœ… Tarihi backend'e uygun hale getiriyoruz
    const formattedData: Partial<CreateInterviewDTO> = {
      ...data,
      // Frontend'de Date objesi veya timestamp gelebilir, ISO formatÄ±na Ã§evriliyor
      expirationDate: new Date(data.expirationDate).toISOString(), 
      // Backend'in beklediÄŸi DTO'ya uymayan alanlarÄ± (Ã¶rneÄŸin _id) temizliyoruz
      questions: data.questions?.map((q) => {
        // Alt ÅŸemadaki gereksiz MongoDB ID'sini kaldÄ±rÄ±yoruz
        const { _id, aiMetadata, ...rest } = q as any; 
        return {
          ...rest,
          aiMetadata: {
            complexityLevel: aiMetadata.complexityLevel,
            requiredSkills: aiMetadata.requiredSkills,
          }, 
        };
      }) || [],
    };

    // ğŸš¨ Endpoint DÃ¼zeltmesi: '/interviews/create' yerine '/' kullanÄ±ldÄ±
    const response = await api.post("/interviews", formattedData);
    return response.data.data; 
  },


  /**
   * KullanÄ±cÄ±nÄ±n mÃ¼lakat listesini Ã§ekme
   */
  async getUserInterviews(): Promise<Interview[]> {
    try {
      const response = await api.get("/interviews/my");
      return response.data.data; 
    } catch (error: any) {
      console.error("KullanÄ±cÄ±nÄ±n mÃ¼lakatlarÄ±nÄ± Ã§ekerken hata oluÅŸtu:", error);
      // Hata middleware'i tarafÄ±ndan yakalanÄ±p daha temiz bir mesaj gÃ¶sterilmesi beklenebilir.
      throw new Error("MÃ¼lakatlar yÃ¼klenemedi, lÃ¼tfen tekrar deneyin.");
    }
  },

  /**
   * Belirli bir mÃ¼lakatÄ± ID ile getirme
   */
  async getInterviewById(id: string): Promise<Interview> {
    try {
      const response = await api.get(`/interviews/${id}`);
      return response.data.data; 
    } catch (error: any) {
      console.error("MÃ¼lakat getirilirken hata oluÅŸtu:", error);
      throw new Error(error.response?.data?.message || "MÃ¼lakat bulunamadÄ±.");
    }
  },

  /**
   * MÃ¼lakatÄ± gÃ¼ncelleme (PUT /:id rotasÄ±na tÃ¼m gÃ¼ncellemeleri toplar)
   */
  async updateInterview(id: string, updateData: Partial<UpdateInterviewDTO>): Promise<Interview> {
    // GÃ¼ncelleme verisinde tarih varsa, ISO formatÄ±na Ã§evir
    const payload = { ...updateData } as any;
    if (payload.expirationDate) {
      payload.expirationDate = new Date(payload.expirationDate).toISOString();
    }
    
    // ğŸš¨ Endpoint DÃ¼zeltmesi: '/interview/' (tekil) yerine '/interviews/' (Ã§oÄŸul) kullanÄ±ldÄ±.
    const response = await api.put(`/interviews/${id}`, payload);
    return response.data.data; 
  },

  /**
   * MÃ¼lakatÄ± yayÄ±nlama (Backend'deki PATCH /:id/publish rotasÄ±na uyar)
   */
  async publishInterview(id: string): Promise<Interview> {
    // ğŸš¨ Yeni Metot ve Endpoint: PATCH /:id/publish
    // Backend'deki Controller/Service mantÄ±ÄŸÄ±na uyum saÄŸlandÄ±.
    const response = await api.patch(`/interviews/${id}/publish`);
    return response.data.data;
  },

  /**
   * MÃ¼lakatÄ± silme (Soft Delete)
   */
  async deleteInterview(id: string) {
    // ğŸš¨ Endpoint DÃ¼zeltmesi: '/interview/' (tekil) yerine '/interviews/' (Ã§oÄŸul) kullanÄ±ldÄ±.
    // Backend'de soft delete bu rotada yapÄ±lÄ±yor.
    await api.delete(`/interviews/${id}`);
  },
  
  /**
   * MÃ¼lakat Linkini GÃ¼ncelleme (Endpoint'i koruyoruz)
   */
  async generateInterviewLink(id: string, expirationDate?: string | number): Promise<Interview> {
    const payload = { 
      expirationDate: expirationDate ? new Date(expirationDate).toISOString() : undefined
    };
    
    // ğŸš¨ Endpoint DÃ¼zeltmesi: '/interview/' (tekil) yerine '/interviews/' (Ã§oÄŸul) kullanÄ±ldÄ±.
    const response = await api.patch(`/interviews/${id}/link`, payload);
    return response.data.data; 
  },

  // ğŸš¨ KALDIRILAN METOTLAR:
  // updateInterviewStatus: Backend'de kaldÄ±rÄ±ldÄ±, yerine publishInterview eklendi.
  // updateInterviewQuestions: MantÄ±ÄŸÄ± updateInterview iÃ§ine alÄ±ndÄ±.
  // updatePersonalityTest: MantÄ±ÄŸÄ± updateInterview iÃ§ine alÄ±ndÄ±.
};
